<?php
/**
 * PostV1Animals
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nedap Livestock Connect
 *
 * # Access Tokens With each endpoint information can be retrieved for one installation only. The access token controls which installation will be accessed. This means that you need to use different access tokens for different installations.      # Scopes For each installation, different packages of data ('Connections') are available. On connect.nedap-livestockmanagement.com/nedap-livestock-connect/ an overview of the different available packages and the corresponding enpdoints is given. The basic connection is free to use, but for some of the other connections additional charges will be applied. In order to get access to other connections your application needs permission from us, and from the specific farmer. The first part can be arranged by contacting Nedap, the second part by OAuth2 scopes.  In OAuth2, scopes let you specify which data your application needs from a user. When requesting permission from a farmer to access his data, you specify which scopes you need, what kind of data you want. If the farmer accepts, you will receive a token for those specified scopes. With that token, you can only access API Endpoints that are allowed by those scopes, since every endpoint needs a specific scope to access it.  Summarized:    - Endpoints are protected by scopes. To access them, you need a token with the correct scopes.    - When requesting access to a farm, by default you get access to the scope 'account', which gives access to basic data. If you need more, send those scopes along with the request.    - You can only request scopes that are permitted by your application. If you need more, contact us.  To access the different available connections, use the following scopes:  ## Cows  ### Basic Connection - account: Access to basic data: animals, groups, and calendar events  ### Attentions Connection - account: Access to attentions  ### Heat Detection Advanced Connection - heat_detection: Access to heat detection  ### Health and Management Advanced Connection - behaviour: Access to behavioural data: activity, eating, standing, lying, standups and walking - rumination: Access to rumination data - inactive: Access to inactive data  ### Sire Advice Connection - sire_advice: Access to sire advices  ## Pigs  ### Basic Connection - account: Access to basic data: animals, groups, calendar events and attentions  ### Sow Weights Connection - weights: Access to weighing data  ### Sorting Connection - sorting: Access to sorting data  ### Pig Performance Testing Connection - pig_performance_testing: Access to pig performance testing data  ### Feeding Connection - feeding_animal_summaries: Access to feeding animal summaries - feeding_location_summaries: Access to feeding location summaries - feeding_extended_location_summaries: Access to feeding location summaries including station totals  # Standards  In the API we use the following standards:  - Timestamps are always in UTC in ISO 8601. An example would be '2017-10-23T20:21:01Z'. - Weights are always in grams.  # HTTP Error codes  We use the following HTTP codes to signify errors: - 400 (Invalid data): The data that is sent is invalid (for example an incorrect Animal object). The return body contains pointers on the specific errors. - 401 (Unauthorized): The provided token is not valid or has expired. - 403 (Forbidden): The provided token is valid but has no access to the accessed endpoint. - 404 (Not found): The object that is requested is not found. - 500 (Server error): Something unexpected went wrong on the server.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PostV1Animals Class Doc Comment
 *
 * @category Class
 * @description Create an animal
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostV1Animals implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'postV1Animals';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'group_id' => 'int',
        'number' => 'int',
        'sex' => 'int',
        'name' => 'string',
        'condition' => 'int',
        'life_number' => 'string',
        'responder1' => 'string',
        'responder2' => 'string',
        'responder3' => 'string',
        'supply_datetime' => '\DateTime',
        'departure_datetime' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'group_id' => 'int32',
        'number' => 'int32',
        'sex' => 'int32',
        'name' => null,
        'condition' => 'int32',
        'life_number' => null,
        'responder1' => null,
        'responder2' => null,
        'responder3' => null,
        'supply_datetime' => 'date-time',
        'departure_datetime' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'group_id' => 'group_id',
        'number' => 'number',
        'sex' => 'sex',
        'name' => 'name',
        'condition' => 'condition',
        'life_number' => 'life_number',
        'responder1' => 'responder1',
        'responder2' => 'responder2',
        'responder3' => 'responder3',
        'supply_datetime' => 'supply_datetime',
        'departure_datetime' => 'departure_datetime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'group_id' => 'setGroupId',
        'number' => 'setNumber',
        'sex' => 'setSex',
        'name' => 'setName',
        'condition' => 'setCondition',
        'life_number' => 'setLifeNumber',
        'responder1' => 'setResponder1',
        'responder2' => 'setResponder2',
        'responder3' => 'setResponder3',
        'supply_datetime' => 'setSupplyDatetime',
        'departure_datetime' => 'setDepartureDatetime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'group_id' => 'getGroupId',
        'number' => 'getNumber',
        'sex' => 'getSex',
        'name' => 'getName',
        'condition' => 'getCondition',
        'life_number' => 'getLifeNumber',
        'responder1' => 'getResponder1',
        'responder2' => 'getResponder2',
        'responder3' => 'getResponder3',
        'supply_datetime' => 'getSupplyDatetime',
        'departure_datetime' => 'getDepartureDatetime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['sex'] = isset($data['sex']) ? $data['sex'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['life_number'] = isset($data['life_number']) ? $data['life_number'] : null;
        $this->container['responder1'] = isset($data['responder1']) ? $data['responder1'] : null;
        $this->container['responder2'] = isset($data['responder2']) ? $data['responder2'] : null;
        $this->container['responder3'] = isset($data['responder3']) ? $data['responder3'] : null;
        $this->container['supply_datetime'] = isset($data['supply_datetime']) ? $data['supply_datetime'] : null;
        $this->container['departure_datetime'] = isset($data['departure_datetime']) ? $data['departure_datetime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['sex'] === null) {
            $invalidProperties[] = "'sex' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of animal
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return int
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param int $group_id The group id of which the animal belongs to
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number The user defined number of the animal (farm unique, maximum length 8 characters).
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets sex
     *
     * @return int
     */
    public function getSex()
    {
        return $this->container['sex'];
    }

    /**
     * Sets sex
     *
     * @param int $sex The sex of the animal. 1: Male, 2: Female
     *
     * @return $this
     */
    public function setSex($sex)
    {
        $this->container['sex'] = $sex;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the animal
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return int
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param int $condition Condition of the animal. 1: Very skinny, 2: Skinny, 3: Normal, 4: Fat, 5: Very fat
     *
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets life_number
     *
     * @return string
     */
    public function getLifeNumber()
    {
        return $this->container['life_number'];
    }

    /**
     * Sets life_number
     *
     * @param string $life_number Life number (maximum length 30 characters)
     *
     * @return $this
     */
    public function setLifeNumber($life_number)
    {
        $this->container['life_number'] = $life_number;

        return $this;
    }

    /**
     * Gets responder1
     *
     * @return string
     */
    public function getResponder1()
    {
        return $this->container['responder1'];
    }

    /**
     * Sets responder1
     *
     * @param string $responder1 First unique responder number (numeric value presented as string, maximum length 15 characters)
     *
     * @return $this
     */
    public function setResponder1($responder1)
    {
        $this->container['responder1'] = $responder1;

        return $this;
    }

    /**
     * Gets responder2
     *
     * @return string
     */
    public function getResponder2()
    {
        return $this->container['responder2'];
    }

    /**
     * Sets responder2
     *
     * @param string $responder2 Second unique responder number (numeric value presented as string, maximum length 15 characters)
     *
     * @return $this
     */
    public function setResponder2($responder2)
    {
        $this->container['responder2'] = $responder2;

        return $this;
    }

    /**
     * Gets responder3
     *
     * @return string
     */
    public function getResponder3()
    {
        return $this->container['responder3'];
    }

    /**
     * Sets responder3
     *
     * @param string $responder3 Third unique responder number (numeric value presented as string, maximum length 15 characters)
     *
     * @return $this
     */
    public function setResponder3($responder3)
    {
        $this->container['responder3'] = $responder3;

        return $this;
    }

    /**
     * Gets supply_datetime
     *
     * @return \DateTime
     */
    public function getSupplyDatetime()
    {
        return $this->container['supply_datetime'];
    }

    /**
     * Sets supply_datetime
     *
     * @param \DateTime $supply_datetime Supply date. Example: 2020-07-15T08:07:19Z
     *
     * @return $this
     */
    public function setSupplyDatetime($supply_datetime)
    {
        $this->container['supply_datetime'] = $supply_datetime;

        return $this;
    }

    /**
     * Gets departure_datetime
     *
     * @return \DateTime
     */
    public function getDepartureDatetime()
    {
        return $this->container['departure_datetime'];
    }

    /**
     * Sets departure_datetime
     *
     * @param \DateTime $departure_datetime Departure date. Example: 2020-07-15T08:07:19Z
     *
     * @return $this
     */
    public function setDepartureDatetime($departure_datetime)
    {
        $this->container['departure_datetime'] = $departure_datetime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


