<?php
/**
 * AnimalVisit
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nedap Livestock Connect
 *
 * # Access Tokens With each endpoint information can be retrieved for one installation only. The access token controls which installation will be accessed. This means that you need to use different access tokens for different installations.      # Scopes For each installation, different packages of data ('Connections') are available. On connect.nedap-livestockmanagement.com/nedap-livestock-connect/ an overview of the different available packages and the corresponding enpdoints is given. The basic connection is free to use, but for some of the other connections additional charges will be applied. In order to get access to other connections your application needs permission from us, and from the specific farmer. The first part can be arranged by contacting Nedap, the second part by OAuth2 scopes.  In OAuth2, scopes let you specify which data your application needs from a user. When requesting permission from a farmer to access his data, you specify which scopes you need, what kind of data you want. If the farmer accepts, you will receive a token for those specified scopes. With that token, you can only access API Endpoints that are allowed by those scopes, since every endpoint needs a specific scope to access it.  Summarized:    - Endpoints are protected by scopes. To access them, you need a token with the correct scopes.    - When requesting access to a farm, by default you get access to the scope 'account', which gives access to basic data. If you need more, send those scopes along with the request.    - You can only request scopes that are permitted by your application. If you need more, contact us.  To access the different available connections, use the following scopes:  ## Cows  ### Basic Connection - account: Access to basic data: animals, groups, and calendar events  ### Attentions Connection - account: Access to attentions  ### Heat Detection Advanced Connection - heat_detection: Access to heat detection  ### Health and Management Advanced Connection - behaviour: Access to behavioural data: activity, eating, standing, lying, standups and walking - rumination: Access to rumination data - inactive: Access to inactive data  ### Sire Advice Connection - sire_advice: Access to sire advices  ## Pigs  ### Basic Connection - account: Access to basic data: animals, groups, calendar events and attentions  ### Sow Weights Connection - weights: Access to weighing data  ### Sorting Connection - sorting: Access to sorting data  ### Pig Performance Testing Connection - pig_performance_testing: Access to pig performance testing data  ### Feeding Connection - feeding_animal_summaries: Access to feeding animal summaries - feeding_location_summaries: Access to feeding location summaries - feeding_extended_location_summaries: Access to feeding location summaries including station totals  # Standards  In the API we use the following standards:  - Timestamps are always in UTC in ISO 8601. An example would be '2017-10-23T20:21:01Z'. - Weights are always in grams.  # HTTP Error codes  We use the following HTTP codes to signify errors: - 400 (Invalid data): The data that is sent is invalid (for example an incorrect Animal object). The return body contains pointers on the specific errors. - 401 (Unauthorized): The provided token is not valid or has expired. - 403 (Forbidden): The provided token is valid but has no access to the accessed endpoint. - 404 (Not found): The object that is requested is not found. - 500 (Server error): Something unexpected went wrong on the server.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AnimalVisit Class Doc Comment
 *
 * @category Class
 * @description This method lists animal visits for a location This list contains animal visits from the start datetime (inclusive) up to the end datetime (exclusive).  If the end datetime is not specified the current datetime will be used. If the start datetime is not specified the start datetime will be the end datetime - 10 days.  Note:   1. The maximum period to request data of is 1 month.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AnimalVisit implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'animal_visit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'location_uuid' => 'string',
        'animal_uuid' => 'string',
        'responder' => 'int',
        'performance_test_number' => 'int',
        'animal_weight' => 'int',
        'start_time' => '\DateTime',
        'end_time' => '\DateTime',
        'supply_date' => '\DateTime',
        'supply_weight' => 'int',
        'feed_intake' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'location_uuid' => null,
        'animal_uuid' => null,
        'responder' => 'int64',
        'performance_test_number' => 'int32',
        'animal_weight' => 'int32',
        'start_time' => 'date-time',
        'end_time' => 'date-time',
        'supply_date' => 'date-time',
        'supply_weight' => 'int32',
        'feed_intake' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'location_uuid' => 'location_uuid',
        'animal_uuid' => 'animal_uuid',
        'responder' => 'responder',
        'performance_test_number' => 'performance_test_number',
        'animal_weight' => 'animal_weight',
        'start_time' => 'start_time',
        'end_time' => 'end_time',
        'supply_date' => 'supply_date',
        'supply_weight' => 'supply_weight',
        'feed_intake' => 'feed_intake'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'location_uuid' => 'setLocationUuid',
        'animal_uuid' => 'setAnimalUuid',
        'responder' => 'setResponder',
        'performance_test_number' => 'setPerformanceTestNumber',
        'animal_weight' => 'setAnimalWeight',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'supply_date' => 'setSupplyDate',
        'supply_weight' => 'setSupplyWeight',
        'feed_intake' => 'setFeedIntake'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'location_uuid' => 'getLocationUuid',
        'animal_uuid' => 'getAnimalUuid',
        'responder' => 'getResponder',
        'performance_test_number' => 'getPerformanceTestNumber',
        'animal_weight' => 'getAnimalWeight',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'supply_date' => 'getSupplyDate',
        'supply_weight' => 'getSupplyWeight',
        'feed_intake' => 'getFeedIntake'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['location_uuid'] = isset($data['location_uuid']) ? $data['location_uuid'] : null;
        $this->container['animal_uuid'] = isset($data['animal_uuid']) ? $data['animal_uuid'] : null;
        $this->container['responder'] = isset($data['responder']) ? $data['responder'] : null;
        $this->container['performance_test_number'] = isset($data['performance_test_number']) ? $data['performance_test_number'] : null;
        $this->container['animal_weight'] = isset($data['animal_weight']) ? $data['animal_weight'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['supply_date'] = isset($data['supply_date']) ? $data['supply_date'] : null;
        $this->container['supply_weight'] = isset($data['supply_weight']) ? $data['supply_weight'] : null;
        $this->container['feed_intake'] = isset($data['feed_intake']) ? $data['feed_intake'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets location_uuid
     *
     * @return string
     */
    public function getLocationUuid()
    {
        return $this->container['location_uuid'];
    }

    /**
     * Sets location_uuid
     *
     * @param string $location_uuid The location UUID
     *
     * @return $this
     */
    public function setLocationUuid($location_uuid)
    {
        $this->container['location_uuid'] = $location_uuid;

        return $this;
    }

    /**
     * Gets animal_uuid
     *
     * @return string
     */
    public function getAnimalUuid()
    {
        return $this->container['animal_uuid'];
    }

    /**
     * Sets animal_uuid
     *
     * @param string $animal_uuid The animal UUID
     *
     * @return $this
     */
    public function setAnimalUuid($animal_uuid)
    {
        $this->container['animal_uuid'] = $animal_uuid;

        return $this;
    }

    /**
     * Gets responder
     *
     * @return int
     */
    public function getResponder()
    {
        return $this->container['responder'];
    }

    /**
     * Sets responder
     *
     * @param int $responder The responder number
     *
     * @return $this
     */
    public function setResponder($responder)
    {
        $this->container['responder'] = $responder;

        return $this;
    }

    /**
     * Gets performance_test_number
     *
     * @return int
     */
    public function getPerformanceTestNumber()
    {
        return $this->container['performance_test_number'];
    }

    /**
     * Sets performance_test_number
     *
     * @param int $performance_test_number The performance test number
     *
     * @return $this
     */
    public function setPerformanceTestNumber($performance_test_number)
    {
        $this->container['performance_test_number'] = $performance_test_number;

        return $this;
    }

    /**
     * Gets animal_weight
     *
     * @return int
     */
    public function getAnimalWeight()
    {
        return $this->container['animal_weight'];
    }

    /**
     * Sets animal_weight
     *
     * @param int $animal_weight The animal weight in grams
     *
     * @return $this
     */
    public function setAnimalWeight($animal_weight)
    {
        $this->container['animal_weight'] = $animal_weight;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime $start_time The start time of the visit
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime $end_time The end time of the visit
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets supply_date
     *
     * @return \DateTime
     */
    public function getSupplyDate()
    {
        return $this->container['supply_date'];
    }

    /**
     * Sets supply_date
     *
     * @param \DateTime $supply_date The supply date of the animal
     *
     * @return $this
     */
    public function setSupplyDate($supply_date)
    {
        $this->container['supply_date'] = $supply_date;

        return $this;
    }

    /**
     * Gets supply_weight
     *
     * @return int
     */
    public function getSupplyWeight()
    {
        return $this->container['supply_weight'];
    }

    /**
     * Sets supply_weight
     *
     * @param int $supply_weight The supply weight of the animal in grams
     *
     * @return $this
     */
    public function setSupplyWeight($supply_weight)
    {
        $this->container['supply_weight'] = $supply_weight;

        return $this;
    }

    /**
     * Gets feed_intake
     *
     * @return int
     */
    public function getFeedIntake()
    {
        return $this->container['feed_intake'];
    }

    /**
     * Sets feed_intake
     *
     * @param int $feed_intake The total feed intake in grams
     *
     * @return $this
     */
    public function setFeedIntake($feed_intake)
    {
        $this->container['feed_intake'] = $feed_intake;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


