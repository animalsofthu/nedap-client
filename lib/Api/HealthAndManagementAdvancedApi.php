<?php
/**
 * HealthAndManagementAdvancedApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Nedap Livestock Connect
 *
 * # Access Tokens With each endpoint information can be retrieved for one installation only. The access token controls which installation will be accessed. This means that you need to use different access tokens for different installations.      # Scopes For each installation, different packages of data ('Connections') are available. On connect.nedap-livestockmanagement.com/nedap-livestock-connect/ an overview of the different available packages and the corresponding enpdoints is given. The basic connection is free to use, but for some of the other connections additional charges will be applied. In order to get access to other connections your application needs permission from us, and from the specific farmer. The first part can be arranged by contacting Nedap, the second part by OAuth2 scopes.  In OAuth2, scopes let you specify which data your application needs from a user. When requesting permission from a farmer to access his data, you specify which scopes you need, what kind of data you want. If the farmer accepts, you will receive a token for those specified scopes. With that token, you can only access API Endpoints that are allowed by those scopes, since every endpoint needs a specific scope to access it.  Summarized:    - Endpoints are protected by scopes. To access them, you need a token with the correct scopes.    - When requesting access to a farm, by default you get access to the scope 'account', which gives access to basic data. If you need more, send those scopes along with the request.    - You can only request scopes that are permitted by your application. If you need more, contact us.  To access the different available connections, use the following scopes:  ## Cows  ### Basic Connection - account: Access to basic data: animals, groups, and calendar events  ### Attentions Connection - account: Access to attentions  ### Heat Detection Advanced Connection - heat_detection: Access to heat detection  ### Health and Management Advanced Connection - behaviour: Access to behavioural data: activity, eating, standing, lying, standups and walking - rumination: Access to rumination data - inactive: Access to inactive data  ### Sire Advice Connection - sire_advice: Access to sire advices  ## Pigs  ### Basic Connection - account: Access to basic data: animals, groups, calendar events and attentions  ### Sow Weights Connection - weights: Access to weighing data  ### Sorting Connection - sorting: Access to sorting data  ### Pig Performance Testing Connection - pig_performance_testing: Access to pig performance testing data  ### Feeding Connection - feeding_animal_summaries: Access to feeding animal summaries - feeding_location_summaries: Access to feeding location summaries - feeding_extended_location_summaries: Access to feeding location summaries including station totals  # Standards  In the API we use the following standards:  - Timestamps are always in UTC in ISO 8601. An example would be '2017-10-23T20:21:01Z'. - Weights are always in grams.  # HTTP Error codes  We use the following HTTP codes to signify errors: - 400 (Invalid data): The data that is sent is invalid (for example an incorrect Animal object). The return body contains pointers on the specific errors. - 401 (Unauthorized): The provided token is not valid or has expired. - 403 (Forbidden): The provided token is valid but has no access to the accessed endpoint. - 404 (Not found): The object that is requested is not found. - 500 (Server error): Something unexpected went wrong on the server.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * HealthAndManagementAdvancedApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HealthAndManagementAdvancedApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation animalEatingDaySummaries
     *
     * eating day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this eating summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EatingSummary
     */
    public function animalEatingDaySummaries($animal_id, $start_date = null, $end_date = null)
    {
        list($response) = $this->animalEatingDaySummariesWithHttpInfo($animal_id, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation animalEatingDaySummariesWithHttpInfo
     *
     * eating day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this eating summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EatingSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function animalEatingDaySummariesWithHttpInfo($animal_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\EatingSummary';
        $request = $this->animalEatingDaySummariesRequest($animal_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EatingSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation animalEatingDaySummariesAsync
     *
     * eating day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this eating summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function animalEatingDaySummariesAsync($animal_id, $start_date = null, $end_date = null)
    {
        return $this->animalEatingDaySummariesAsyncWithHttpInfo($animal_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation animalEatingDaySummariesAsyncWithHttpInfo
     *
     * eating day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this eating summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function animalEatingDaySummariesAsyncWithHttpInfo($animal_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\EatingSummary';
        $request = $this->animalEatingDaySummariesRequest($animal_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'animalEatingDaySummaries'
     *
     * @param  int $animal_id The id of the animal this eating summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function animalEatingDaySummariesRequest($animal_id, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'animal_id' is set
        if ($animal_id === null || (is_array($animal_id) && count($animal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $animal_id when calling animalEatingDaySummaries'
            );
        }

        $resourcePath = '/v1/behaviour/eating/animal/day_summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($animal_id !== null) {
            $queryParams['animal_id'] = ObjectSerializer::toQueryValue($animal_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation animalInactiveDaySummaries
     *
     * inactive day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this inactive summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InactiveSummary
     */
    public function animalInactiveDaySummaries($animal_id, $start_date = null, $end_date = null)
    {
        list($response) = $this->animalInactiveDaySummariesWithHttpInfo($animal_id, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation animalInactiveDaySummariesWithHttpInfo
     *
     * inactive day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this inactive summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InactiveSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function animalInactiveDaySummariesWithHttpInfo($animal_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\InactiveSummary';
        $request = $this->animalInactiveDaySummariesRequest($animal_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InactiveSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation animalInactiveDaySummariesAsync
     *
     * inactive day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this inactive summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function animalInactiveDaySummariesAsync($animal_id, $start_date = null, $end_date = null)
    {
        return $this->animalInactiveDaySummariesAsyncWithHttpInfo($animal_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation animalInactiveDaySummariesAsyncWithHttpInfo
     *
     * inactive day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this inactive summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function animalInactiveDaySummariesAsyncWithHttpInfo($animal_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\InactiveSummary';
        $request = $this->animalInactiveDaySummariesRequest($animal_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'animalInactiveDaySummaries'
     *
     * @param  int $animal_id The id of the animal this inactive summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function animalInactiveDaySummariesRequest($animal_id, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'animal_id' is set
        if ($animal_id === null || (is_array($animal_id) && count($animal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $animal_id when calling animalInactiveDaySummaries'
            );
        }

        $resourcePath = '/v1/behaviour/inactive/animal/day_summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($animal_id !== null) {
            $queryParams['animal_id'] = ObjectSerializer::toQueryValue($animal_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation animalLyingDaySummaries
     *
     * lying day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this lying summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\LyingSummary
     */
    public function animalLyingDaySummaries($animal_id, $start_date = null, $end_date = null)
    {
        list($response) = $this->animalLyingDaySummariesWithHttpInfo($animal_id, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation animalLyingDaySummariesWithHttpInfo
     *
     * lying day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this lying summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\LyingSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function animalLyingDaySummariesWithHttpInfo($animal_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\LyingSummary';
        $request = $this->animalLyingDaySummariesRequest($animal_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\LyingSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation animalLyingDaySummariesAsync
     *
     * lying day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this lying summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function animalLyingDaySummariesAsync($animal_id, $start_date = null, $end_date = null)
    {
        return $this->animalLyingDaySummariesAsyncWithHttpInfo($animal_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation animalLyingDaySummariesAsyncWithHttpInfo
     *
     * lying day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this lying summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function animalLyingDaySummariesAsyncWithHttpInfo($animal_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\LyingSummary';
        $request = $this->animalLyingDaySummariesRequest($animal_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'animalLyingDaySummaries'
     *
     * @param  int $animal_id The id of the animal this lying summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function animalLyingDaySummariesRequest($animal_id, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'animal_id' is set
        if ($animal_id === null || (is_array($animal_id) && count($animal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $animal_id when calling animalLyingDaySummaries'
            );
        }

        $resourcePath = '/v1/behaviour/lying/animal/day_summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($animal_id !== null) {
            $queryParams['animal_id'] = ObjectSerializer::toQueryValue($animal_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation animalRuminationDaySummaries
     *
     * rumination day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this rumination summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RuminationSummary
     */
    public function animalRuminationDaySummaries($animal_id, $start_date = null, $end_date = null)
    {
        list($response) = $this->animalRuminationDaySummariesWithHttpInfo($animal_id, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation animalRuminationDaySummariesWithHttpInfo
     *
     * rumination day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this rumination summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RuminationSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function animalRuminationDaySummariesWithHttpInfo($animal_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\RuminationSummary';
        $request = $this->animalRuminationDaySummariesRequest($animal_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RuminationSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation animalRuminationDaySummariesAsync
     *
     * rumination day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this rumination summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function animalRuminationDaySummariesAsync($animal_id, $start_date = null, $end_date = null)
    {
        return $this->animalRuminationDaySummariesAsyncWithHttpInfo($animal_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation animalRuminationDaySummariesAsyncWithHttpInfo
     *
     * rumination day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this rumination summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function animalRuminationDaySummariesAsyncWithHttpInfo($animal_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\RuminationSummary';
        $request = $this->animalRuminationDaySummariesRequest($animal_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'animalRuminationDaySummaries'
     *
     * @param  int $animal_id The id of the animal this rumination summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function animalRuminationDaySummariesRequest($animal_id, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'animal_id' is set
        if ($animal_id === null || (is_array($animal_id) && count($animal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $animal_id when calling animalRuminationDaySummaries'
            );
        }

        $resourcePath = '/v1/behaviour/rumination/animal/day_summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($animal_id !== null) {
            $queryParams['animal_id'] = ObjectSerializer::toQueryValue($animal_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation animalStandingDaySummaries
     *
     * standing day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this standing summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\StandingSummary
     */
    public function animalStandingDaySummaries($animal_id, $start_date = null, $end_date = null)
    {
        list($response) = $this->animalStandingDaySummariesWithHttpInfo($animal_id, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation animalStandingDaySummariesWithHttpInfo
     *
     * standing day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this standing summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\StandingSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function animalStandingDaySummariesWithHttpInfo($animal_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\StandingSummary';
        $request = $this->animalStandingDaySummariesRequest($animal_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\StandingSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation animalStandingDaySummariesAsync
     *
     * standing day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this standing summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function animalStandingDaySummariesAsync($animal_id, $start_date = null, $end_date = null)
    {
        return $this->animalStandingDaySummariesAsyncWithHttpInfo($animal_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation animalStandingDaySummariesAsyncWithHttpInfo
     *
     * standing day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this standing summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function animalStandingDaySummariesAsyncWithHttpInfo($animal_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\StandingSummary';
        $request = $this->animalStandingDaySummariesRequest($animal_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'animalStandingDaySummaries'
     *
     * @param  int $animal_id The id of the animal this standing summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function animalStandingDaySummariesRequest($animal_id, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'animal_id' is set
        if ($animal_id === null || (is_array($animal_id) && count($animal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $animal_id when calling animalStandingDaySummaries'
            );
        }

        $resourcePath = '/v1/behaviour/standing/animal/day_summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($animal_id !== null) {
            $queryParams['animal_id'] = ObjectSerializer::toQueryValue($animal_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation animalStandupsDaySummaries
     *
     * standups day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this standups summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\StandupsSummary
     */
    public function animalStandupsDaySummaries($animal_id, $start_date = null, $end_date = null)
    {
        list($response) = $this->animalStandupsDaySummariesWithHttpInfo($animal_id, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation animalStandupsDaySummariesWithHttpInfo
     *
     * standups day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this standups summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\StandupsSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function animalStandupsDaySummariesWithHttpInfo($animal_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\StandupsSummary';
        $request = $this->animalStandupsDaySummariesRequest($animal_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\StandupsSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation animalStandupsDaySummariesAsync
     *
     * standups day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this standups summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function animalStandupsDaySummariesAsync($animal_id, $start_date = null, $end_date = null)
    {
        return $this->animalStandupsDaySummariesAsyncWithHttpInfo($animal_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation animalStandupsDaySummariesAsyncWithHttpInfo
     *
     * standups day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this standups summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function animalStandupsDaySummariesAsyncWithHttpInfo($animal_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\StandupsSummary';
        $request = $this->animalStandupsDaySummariesRequest($animal_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'animalStandupsDaySummaries'
     *
     * @param  int $animal_id The id of the animal this standups summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function animalStandupsDaySummariesRequest($animal_id, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'animal_id' is set
        if ($animal_id === null || (is_array($animal_id) && count($animal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $animal_id when calling animalStandupsDaySummaries'
            );
        }

        $resourcePath = '/v1/behaviour/standups/animal/day_summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($animal_id !== null) {
            $queryParams['animal_id'] = ObjectSerializer::toQueryValue($animal_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation animalStepsDaySummaries
     *
     * step day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this step summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\StepsSummary
     */
    public function animalStepsDaySummaries($animal_id, $start_date = null, $end_date = null)
    {
        list($response) = $this->animalStepsDaySummariesWithHttpInfo($animal_id, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation animalStepsDaySummariesWithHttpInfo
     *
     * step day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this step summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\StepsSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function animalStepsDaySummariesWithHttpInfo($animal_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\StepsSummary';
        $request = $this->animalStepsDaySummariesRequest($animal_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\StepsSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation animalStepsDaySummariesAsync
     *
     * step day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this step summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function animalStepsDaySummariesAsync($animal_id, $start_date = null, $end_date = null)
    {
        return $this->animalStepsDaySummariesAsyncWithHttpInfo($animal_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation animalStepsDaySummariesAsyncWithHttpInfo
     *
     * step day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this step summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function animalStepsDaySummariesAsyncWithHttpInfo($animal_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\StepsSummary';
        $request = $this->animalStepsDaySummariesRequest($animal_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'animalStepsDaySummaries'
     *
     * @param  int $animal_id The id of the animal this step summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function animalStepsDaySummariesRequest($animal_id, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'animal_id' is set
        if ($animal_id === null || (is_array($animal_id) && count($animal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $animal_id when calling animalStepsDaySummaries'
            );
        }

        $resourcePath = '/v1/behaviour/steps/animal/day_summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($animal_id !== null) {
            $queryParams['animal_id'] = ObjectSerializer::toQueryValue($animal_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation animalWalkingDaySummaries
     *
     * walking day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this walking summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\WalkingSummary
     */
    public function animalWalkingDaySummaries($animal_id, $start_date = null, $end_date = null)
    {
        list($response) = $this->animalWalkingDaySummariesWithHttpInfo($animal_id, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation animalWalkingDaySummariesWithHttpInfo
     *
     * walking day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this walking summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\WalkingSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function animalWalkingDaySummariesWithHttpInfo($animal_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\WalkingSummary';
        $request = $this->animalWalkingDaySummariesRequest($animal_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\WalkingSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation animalWalkingDaySummariesAsync
     *
     * walking day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this walking summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function animalWalkingDaySummariesAsync($animal_id, $start_date = null, $end_date = null)
    {
        return $this->animalWalkingDaySummariesAsyncWithHttpInfo($animal_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation animalWalkingDaySummariesAsyncWithHttpInfo
     *
     * walking day summaries of an animal
     *
     * @param  int $animal_id The id of the animal this walking summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function animalWalkingDaySummariesAsyncWithHttpInfo($animal_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\WalkingSummary';
        $request = $this->animalWalkingDaySummariesRequest($animal_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'animalWalkingDaySummaries'
     *
     * @param  int $animal_id The id of the animal this walking summary belongs to (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function animalWalkingDaySummariesRequest($animal_id, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'animal_id' is set
        if ($animal_id === null || (is_array($animal_id) && count($animal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $animal_id when calling animalWalkingDaySummaries'
            );
        }

        $resourcePath = '/v1/behaviour/walking/animal/day_summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($animal_id !== null) {
            $queryParams['animal_id'] = ObjectSerializer::toQueryValue($animal_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupActivityDaySummaries
     *
     * step day summaries of an animal group
     *
     * @param  int $group_id the group (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\StepsSummary
     */
    public function groupActivityDaySummaries($group_id, $start_date = null, $end_date = null)
    {
        list($response) = $this->groupActivityDaySummariesWithHttpInfo($group_id, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation groupActivityDaySummariesWithHttpInfo
     *
     * step day summaries of an animal group
     *
     * @param  int $group_id the group (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\StepsSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupActivityDaySummariesWithHttpInfo($group_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\StepsSummary';
        $request = $this->groupActivityDaySummariesRequest($group_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\StepsSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupActivityDaySummariesAsync
     *
     * step day summaries of an animal group
     *
     * @param  int $group_id the group (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupActivityDaySummariesAsync($group_id, $start_date = null, $end_date = null)
    {
        return $this->groupActivityDaySummariesAsyncWithHttpInfo($group_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupActivityDaySummariesAsyncWithHttpInfo
     *
     * step day summaries of an animal group
     *
     * @param  int $group_id the group (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupActivityDaySummariesAsyncWithHttpInfo($group_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\StepsSummary';
        $request = $this->groupActivityDaySummariesRequest($group_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupActivityDaySummaries'
     *
     * @param  int $group_id the group (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function groupActivityDaySummariesRequest($group_id, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling groupActivityDaySummaries'
            );
        }

        $resourcePath = '/v1/behaviour/steps/group/day_summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($group_id !== null) {
            $queryParams['group_id'] = ObjectSerializer::toQueryValue($group_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupEatingDaySummaries
     *
     * eating day summaries of an animal group
     *
     * @param  int $group_id the group (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EatingSummary
     */
    public function groupEatingDaySummaries($group_id, $start_date = null, $end_date = null)
    {
        list($response) = $this->groupEatingDaySummariesWithHttpInfo($group_id, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation groupEatingDaySummariesWithHttpInfo
     *
     * eating day summaries of an animal group
     *
     * @param  int $group_id the group (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EatingSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupEatingDaySummariesWithHttpInfo($group_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\EatingSummary';
        $request = $this->groupEatingDaySummariesRequest($group_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EatingSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupEatingDaySummariesAsync
     *
     * eating day summaries of an animal group
     *
     * @param  int $group_id the group (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupEatingDaySummariesAsync($group_id, $start_date = null, $end_date = null)
    {
        return $this->groupEatingDaySummariesAsyncWithHttpInfo($group_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupEatingDaySummariesAsyncWithHttpInfo
     *
     * eating day summaries of an animal group
     *
     * @param  int $group_id the group (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupEatingDaySummariesAsyncWithHttpInfo($group_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\EatingSummary';
        $request = $this->groupEatingDaySummariesRequest($group_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupEatingDaySummaries'
     *
     * @param  int $group_id the group (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function groupEatingDaySummariesRequest($group_id, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling groupEatingDaySummaries'
            );
        }

        $resourcePath = '/v1/behaviour/eating/group/day_summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($group_id !== null) {
            $queryParams['group_id'] = ObjectSerializer::toQueryValue($group_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupInactiveDaySummaries
     *
     * inactive day summaries of an animal group
     *
     * @param  int $group_id the group (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InactiveSummary
     */
    public function groupInactiveDaySummaries($group_id, $start_date = null, $end_date = null)
    {
        list($response) = $this->groupInactiveDaySummariesWithHttpInfo($group_id, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation groupInactiveDaySummariesWithHttpInfo
     *
     * inactive day summaries of an animal group
     *
     * @param  int $group_id the group (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InactiveSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupInactiveDaySummariesWithHttpInfo($group_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\InactiveSummary';
        $request = $this->groupInactiveDaySummariesRequest($group_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InactiveSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupInactiveDaySummariesAsync
     *
     * inactive day summaries of an animal group
     *
     * @param  int $group_id the group (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupInactiveDaySummariesAsync($group_id, $start_date = null, $end_date = null)
    {
        return $this->groupInactiveDaySummariesAsyncWithHttpInfo($group_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupInactiveDaySummariesAsyncWithHttpInfo
     *
     * inactive day summaries of an animal group
     *
     * @param  int $group_id the group (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupInactiveDaySummariesAsyncWithHttpInfo($group_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\InactiveSummary';
        $request = $this->groupInactiveDaySummariesRequest($group_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupInactiveDaySummaries'
     *
     * @param  int $group_id the group (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function groupInactiveDaySummariesRequest($group_id, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling groupInactiveDaySummaries'
            );
        }

        $resourcePath = '/v1/behaviour/inactive/group/day_summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($group_id !== null) {
            $queryParams['group_id'] = ObjectSerializer::toQueryValue($group_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupLyingDaySummaries
     *
     * lying day summaries of an animal group
     *
     * @param  int $group_id the group of the installation (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\LyingSummary
     */
    public function groupLyingDaySummaries($group_id, $start_date = null, $end_date = null)
    {
        list($response) = $this->groupLyingDaySummariesWithHttpInfo($group_id, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation groupLyingDaySummariesWithHttpInfo
     *
     * lying day summaries of an animal group
     *
     * @param  int $group_id the group of the installation (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\LyingSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupLyingDaySummariesWithHttpInfo($group_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\LyingSummary';
        $request = $this->groupLyingDaySummariesRequest($group_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\LyingSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupLyingDaySummariesAsync
     *
     * lying day summaries of an animal group
     *
     * @param  int $group_id the group of the installation (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupLyingDaySummariesAsync($group_id, $start_date = null, $end_date = null)
    {
        return $this->groupLyingDaySummariesAsyncWithHttpInfo($group_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupLyingDaySummariesAsyncWithHttpInfo
     *
     * lying day summaries of an animal group
     *
     * @param  int $group_id the group of the installation (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupLyingDaySummariesAsyncWithHttpInfo($group_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\LyingSummary';
        $request = $this->groupLyingDaySummariesRequest($group_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupLyingDaySummaries'
     *
     * @param  int $group_id the group of the installation (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function groupLyingDaySummariesRequest($group_id, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling groupLyingDaySummaries'
            );
        }

        $resourcePath = '/v1/behaviour/lying/group/day_summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($group_id !== null) {
            $queryParams['group_id'] = ObjectSerializer::toQueryValue($group_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupRuminationDaySummaries
     *
     * rumination day summaries of an animal group
     *
     * @param  int $group_id the group (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RuminationSummary
     */
    public function groupRuminationDaySummaries($group_id, $start_date = null, $end_date = null)
    {
        list($response) = $this->groupRuminationDaySummariesWithHttpInfo($group_id, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation groupRuminationDaySummariesWithHttpInfo
     *
     * rumination day summaries of an animal group
     *
     * @param  int $group_id the group (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RuminationSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupRuminationDaySummariesWithHttpInfo($group_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\RuminationSummary';
        $request = $this->groupRuminationDaySummariesRequest($group_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RuminationSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupRuminationDaySummariesAsync
     *
     * rumination day summaries of an animal group
     *
     * @param  int $group_id the group (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupRuminationDaySummariesAsync($group_id, $start_date = null, $end_date = null)
    {
        return $this->groupRuminationDaySummariesAsyncWithHttpInfo($group_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupRuminationDaySummariesAsyncWithHttpInfo
     *
     * rumination day summaries of an animal group
     *
     * @param  int $group_id the group (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupRuminationDaySummariesAsyncWithHttpInfo($group_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\RuminationSummary';
        $request = $this->groupRuminationDaySummariesRequest($group_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupRuminationDaySummaries'
     *
     * @param  int $group_id the group (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function groupRuminationDaySummariesRequest($group_id, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling groupRuminationDaySummaries'
            );
        }

        $resourcePath = '/v1/behaviour/rumination/group/day_summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($group_id !== null) {
            $queryParams['group_id'] = ObjectSerializer::toQueryValue($group_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupStandingDaySummaries
     *
     * standing day summaries of an animal group
     *
     * @param  int $group_id the group of the installation (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\StandingSummary
     */
    public function groupStandingDaySummaries($group_id, $start_date = null, $end_date = null)
    {
        list($response) = $this->groupStandingDaySummariesWithHttpInfo($group_id, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation groupStandingDaySummariesWithHttpInfo
     *
     * standing day summaries of an animal group
     *
     * @param  int $group_id the group of the installation (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\StandingSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupStandingDaySummariesWithHttpInfo($group_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\StandingSummary';
        $request = $this->groupStandingDaySummariesRequest($group_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\StandingSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupStandingDaySummariesAsync
     *
     * standing day summaries of an animal group
     *
     * @param  int $group_id the group of the installation (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupStandingDaySummariesAsync($group_id, $start_date = null, $end_date = null)
    {
        return $this->groupStandingDaySummariesAsyncWithHttpInfo($group_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupStandingDaySummariesAsyncWithHttpInfo
     *
     * standing day summaries of an animal group
     *
     * @param  int $group_id the group of the installation (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupStandingDaySummariesAsyncWithHttpInfo($group_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\StandingSummary';
        $request = $this->groupStandingDaySummariesRequest($group_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupStandingDaySummaries'
     *
     * @param  int $group_id the group of the installation (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function groupStandingDaySummariesRequest($group_id, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling groupStandingDaySummaries'
            );
        }

        $resourcePath = '/v1/behaviour/standing/group/day_summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($group_id !== null) {
            $queryParams['group_id'] = ObjectSerializer::toQueryValue($group_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupStandupsDaySummaries
     *
     * standups day summaries of an animal group
     *
     * @param  int $group_id the group of the installation (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\StandupsSummary
     */
    public function groupStandupsDaySummaries($group_id, $start_date = null, $end_date = null)
    {
        list($response) = $this->groupStandupsDaySummariesWithHttpInfo($group_id, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation groupStandupsDaySummariesWithHttpInfo
     *
     * standups day summaries of an animal group
     *
     * @param  int $group_id the group of the installation (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\StandupsSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupStandupsDaySummariesWithHttpInfo($group_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\StandupsSummary';
        $request = $this->groupStandupsDaySummariesRequest($group_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\StandupsSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupStandupsDaySummariesAsync
     *
     * standups day summaries of an animal group
     *
     * @param  int $group_id the group of the installation (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupStandupsDaySummariesAsync($group_id, $start_date = null, $end_date = null)
    {
        return $this->groupStandupsDaySummariesAsyncWithHttpInfo($group_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupStandupsDaySummariesAsyncWithHttpInfo
     *
     * standups day summaries of an animal group
     *
     * @param  int $group_id the group of the installation (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupStandupsDaySummariesAsyncWithHttpInfo($group_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\StandupsSummary';
        $request = $this->groupStandupsDaySummariesRequest($group_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupStandupsDaySummaries'
     *
     * @param  int $group_id the group of the installation (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function groupStandupsDaySummariesRequest($group_id, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling groupStandupsDaySummaries'
            );
        }

        $resourcePath = '/v1/behaviour/standups/group/day_summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($group_id !== null) {
            $queryParams['group_id'] = ObjectSerializer::toQueryValue($group_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupWalkingDaySummaries
     *
     * walking day summaries of an animal group
     *
     * @param  int $group_id the group of the installation (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\WalkingSummary
     */
    public function groupWalkingDaySummaries($group_id, $start_date = null, $end_date = null)
    {
        list($response) = $this->groupWalkingDaySummariesWithHttpInfo($group_id, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation groupWalkingDaySummariesWithHttpInfo
     *
     * walking day summaries of an animal group
     *
     * @param  int $group_id the group of the installation (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\WalkingSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupWalkingDaySummariesWithHttpInfo($group_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\WalkingSummary';
        $request = $this->groupWalkingDaySummariesRequest($group_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\WalkingSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupWalkingDaySummariesAsync
     *
     * walking day summaries of an animal group
     *
     * @param  int $group_id the group of the installation (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupWalkingDaySummariesAsync($group_id, $start_date = null, $end_date = null)
    {
        return $this->groupWalkingDaySummariesAsyncWithHttpInfo($group_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupWalkingDaySummariesAsyncWithHttpInfo
     *
     * walking day summaries of an animal group
     *
     * @param  int $group_id the group of the installation (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupWalkingDaySummariesAsyncWithHttpInfo($group_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\WalkingSummary';
        $request = $this->groupWalkingDaySummariesRequest($group_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupWalkingDaySummaries'
     *
     * @param  int $group_id the group of the installation (required)
     * @param  \DateTime $start_date start datetime (inclusive). Example: 2020-07-15T08:07:19Z (optional)
     * @param  \DateTime $end_date end datetime (exclusive). Example: 2020-07-15T08:07:19Z (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function groupWalkingDaySummariesRequest($group_id, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling groupWalkingDaySummaries'
            );
        }

        $resourcePath = '/v1/behaviour/walking/group/day_summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($group_id !== null) {
            $queryParams['group_id'] = ObjectSerializer::toQueryValue($group_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
